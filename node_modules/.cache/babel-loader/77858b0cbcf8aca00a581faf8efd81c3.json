{"ast":null,"code":"import _classCallCheck from \"/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/src/components/Sidebar/Sidebar.jsx\";\n\n/*eslint-disable*/\nimport React from \"react\";\nimport { NavLink, Link } from \"react-router-dom\"; // nodejs library to set properties for components\n\nimport { PropTypes } from \"prop-types\"; // javascript plugin used to create scrollbars on windows\n\nimport PerfectScrollbar from \"perfect-scrollbar\"; // reactstrap components\n\nimport { Nav } from \"reactstrap\";\nvar ps;\n\nvar Sidebar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Sidebar, _React$Component);\n\n  function Sidebar(props) {\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sidebar).call(this, props));\n\n    _this.linkOnClick = function () {\n      document.documentElement.classList.remove(\"nav-open\");\n    };\n\n    _this.activeRoute.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    return _this;\n  } // verifies if routeName is the one active (in browser input)\n\n\n  _createClass(Sidebar, [{\n    key: \"activeRoute\",\n    value: function activeRoute(routeName) {\n      return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps = new PerfectScrollbar(this.refs.sidebar, {\n          suppressScrollX: true,\n          suppressScrollY: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          bgColor = _this$props.bgColor,\n          routes = _this$props.routes,\n          rtlActive = _this$props.rtlActive,\n          logo = _this$props.logo;\n      var logoImg = null;\n      var logoText = null;\n\n      if (logo !== undefined) {\n        if (logo.outterLink !== undefined) {\n          logoImg = React.createElement(\"a\", {\n            href: logo.outterLink,\n            className: \"simple-text logo-mini\",\n            target: \"_blank\",\n            onClick: this.props.toggleSidebar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"logo-img\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: logo.imgSrc,\n            alt: \"react-logo\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          })));\n          logoText = React.createElement(\"a\", {\n            href: logo.outterLink,\n            className: \"simple-text logo-normal\",\n            target: \"_blank\",\n            onClick: this.props.toggleSidebar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, logo.text);\n        } else {\n          logoImg = React.createElement(Link, {\n            to: logo.innerLink,\n            className: \"simple-text logo-mini\",\n            onClick: this.props.toggleSidebar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"logo-img\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: logo.imgSrc,\n            alt: \"react-logo\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          })));\n          logoText = React.createElement(Link, {\n            to: logo.innerLink,\n            className: \"simple-text logo-normal\",\n            onClick: this.props.toggleSidebar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, logo.text);\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"sidebar\",\n        data: bgColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sidebar-wrapper\",\n        ref: \"sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, logoImg !== null || logoText !== null ? React.createElement(\"div\", {\n        className: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, logoImg, logoText) : null, React.createElement(Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, routes.map(function (prop, key) {\n        if (prop.redirect) return null;\n        return React.createElement(\"li\", {\n          className: _this2.activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\"),\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          to: prop.layout + prop.path,\n          className: \"nav-link\",\n          activeClassName: \"active\",\n          onClick: _this2.props.toggleSidebar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: prop.icon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, rtlActive ? prop.rtlName : prop.name)));\n      }))));\n    }\n  }]);\n\n  return Sidebar;\n}(React.Component);\n\nSidebar.defaultProps = {\n  rtlActive: false,\n  bgColor: \"primary\",\n  routes: [{}]\n};\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  rtlActive: PropTypes.bool,\n  bgColor: PropTypes.oneOf([\"primary\", \"blue\", \"green\"]),\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string\n  })\n};\nexport default Sidebar;","map":{"version":3,"sources":["/Users/thuy.dtt1118/Desktop/HW/Project3-Group4/my-life-advisors/src/components/Sidebar/Sidebar.jsx"],"names":["React","NavLink","Link","PropTypes","PerfectScrollbar","Nav","ps","Sidebar","props","linkOnClick","document","documentElement","classList","remove","activeRoute","bind","routeName","location","pathname","indexOf","navigator","platform","refs","sidebar","suppressScrollX","suppressScrollY","destroy","bgColor","routes","rtlActive","logo","logoImg","logoText","undefined","outterLink","toggleSidebar","imgSrc","text","innerLink","map","prop","key","redirect","path","pro","layout","icon","rtlName","name","Component","defaultProps","propTypes","bool","oneOf","arrayOf","object","shape","string","node"],"mappings":"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","sourcesContent":["/*eslint-disable*/\nimport React from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\n// nodejs library to set properties for components\nimport { PropTypes } from \"prop-types\";\n\n// javascript plugin used to create scrollbars on windows\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\n// reactstrap components\nimport { Nav } from \"reactstrap\";\n\nvar ps;\n\nclass Sidebar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.activeRoute.bind(this);\n  }\n  // verifies if routeName is the one active (in browser input)\n  activeRoute(routeName) {\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  }\n  componentDidMount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(this.refs.sidebar, {\n        suppressScrollX: true,\n        suppressScrollY: false\n      });\n    }\n  }\n  componentWillUnmount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps.destroy();\n    }\n  }\n  linkOnClick = () => {\n    document.documentElement.classList.remove(\"nav-open\");\n  };\n  render() {\n    const { bgColor, routes, rtlActive, logo } = this.props;\n    let logoImg = null;\n    let logoText = null;\n    if (logo !== undefined) {\n      if (logo.outterLink !== undefined) {\n        logoImg = (\n          <a\n            href={logo.outterLink}\n            className=\"simple-text logo-mini\"\n            target=\"_blank\"\n            onClick={this.props.toggleSidebar}\n          >\n            <div className=\"logo-img\">\n              <img src={logo.imgSrc} alt=\"react-logo\" />\n            </div>\n          </a>\n        );\n        logoText = (\n          <a\n            href={logo.outterLink}\n            className=\"simple-text logo-normal\"\n            target=\"_blank\"\n            onClick={this.props.toggleSidebar}\n          >\n            {logo.text}\n          </a>\n        );\n      } else {\n        logoImg = (\n          <Link\n            to={logo.innerLink}\n            className=\"simple-text logo-mini\"\n            onClick={this.props.toggleSidebar}\n          >\n            <div className=\"logo-img\">\n              <img src={logo.imgSrc} alt=\"react-logo\" />\n            </div>\n          </Link>\n        );\n        logoText = (\n          <Link\n            to={logo.innerLink}\n            className=\"simple-text logo-normal\"\n            onClick={this.props.toggleSidebar}\n          >\n            {logo.text}\n          </Link>\n        );\n      }\n    }\n    return (\n      <div className=\"sidebar\" data={bgColor}>\n        <div className=\"sidebar-wrapper\" ref=\"sidebar\">\n          {logoImg !== null || logoText !== null ? (\n            <div className=\"logo\">\n              {logoImg}\n              {logoText}\n            </div>\n          ) : null}\n          <Nav>\n            {routes.map((prop, key) => {\n              if (prop.redirect) return null;\n              return (\n                <li\n                  className={\n                    this.activeRoute(prop.path) +\n                    (prop.pro ? \" active-pro\" : \"\")\n                  }\n                  key={key}\n                >\n                  <NavLink\n                    to={prop.layout + prop.path}\n                    className=\"nav-link\"\n                    activeClassName=\"active\"\n                    onClick={this.props.toggleSidebar}\n                  >\n                    <i className={prop.icon} />\n                    <p>{rtlActive ? prop.rtlName : prop.name}</p>\n                  </NavLink>\n                </li>\n              );\n            })}\n          </Nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nSidebar.defaultProps = {\n  rtlActive: false,\n  bgColor: \"primary\",\n  routes: [{}]\n};\n\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  rtlActive: PropTypes.bool,\n  bgColor: PropTypes.oneOf([\"primary\", \"blue\", \"green\"]),\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string\n  })\n};\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}